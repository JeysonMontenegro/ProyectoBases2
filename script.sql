-- mysql script generated by mysql workbench
-- 06/14/15 17:54:11
-- model: new model    version: 1.0
-- mysql workbench forward engineering

set @old_unique_checks=@@unique_checks, unique_checks=0;
set @old_foreign_key_checks=@@foreign_key_checks, foreign_key_checks=0;
set @old_sql_mode=@@sql_mode, sql_mode='traditional,allow_invalid_dates';

-- -----------------------------------------------------
-- schema servicioslegales
-- -----------------------------------------------------

-- -----------------------------------------------------
-- schema servicioslegales
-- -----------------------------------------------------
create schema if not exists `servicioslegales` default character set utf8 collate utf8_general_ci ;
use `servicioslegales` ;

-- -----------------------------------------------------
-- table `servicioslegales`.`tipo_servicio`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`tipo_servicio` (
  `idtipo_servicio` int not null auto_increment,
  `nombre` varchar(70) not null,
  primary key (`idtipo_servicio`))
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`servicio`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`servicio` (
  `idservicio` int not null auto_increment,
  `nombre` varchar(45) not null,
  `descripcion` mediumtext not null,
  `idtipo_servicio` int not null,
  `precio` double not null,
  primary key (`idservicio`),
  index `fk_servicio_tipo_servicio1_idx` (`idtipo_servicio` asc),
  constraint `fk_servicio_tipo_servicio1`
    foreign key (`idtipo_servicio`)
    references `servicioslegales`.`tipo_servicio` (`idtipo_servicio`)
    on delete cascade
    on update no action)
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`requisito`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`requisito` (
  `idrequisito` int not null auto_increment,
  `nombre` varchar(45) not null,
  `descripcion` mediumtext not null,
  primary key (`idrequisito`))
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`servicio_requisito`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`servicio_requisito` (
  `idservicio` int not null,
  `idrequisito` int not null,
  primary key (`idservicio`, `idrequisito`),
  index `fk_servicio_requisito_requisito1_idx` (`idrequisito` asc),
  constraint `fk_servicio_requisito_servicio1`
    foreign key (`idservicio`)
    references `servicioslegales`.`servicio` (`idservicio`)
    on delete cascade
    on update no action,
  constraint `fk_servicio_requisito_requisito1`
    foreign key (`idrequisito`)
    references `servicioslegales`.`requisito` (`idrequisito`)
    on delete cascade
    on update no action)
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`tipo`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`tipo` (
  `idtipo` int not null auto_increment,
  `nombre` varchar(45) not null,
  primary key (`idtipo`))
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`usuario`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`usuario` (
  `idusuario` int not null auto_increment,
  `nombre` varchar(45) not null,
  `dpi` varchar(20) not null,
  `telefono` varchar(45) not null,
  `correo` varchar(45) not null,
  `direccion` varchar(70) not null,
  `idtipo` int not null,
  `nombre_usuario` varchar(15) not null,
  `contrasenia` char(32) not null,
  primary key (`idusuario`),
  index `fk_usuario_tipo_idx` (`idtipo` asc),
  unique index `nombre_usuario_unique` (`nombre_usuario` asc),
  constraint `fk_usuario_tipo`
    foreign key (`idtipo`)
    references `servicioslegales`.`tipo` (`idtipo`)
    on delete cascade
    on update no action)
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`proceso`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`proceso` (
  `idproceso` int not null auto_increment,
  `idusuario` int not null,
  `idservicio` int not null,
  `fecha_inicio` datetime not null,
  `estado` tinyint(1) not null,
  primary key (`idproceso`),
  index `fk_proceso_usuario1_idx` (`idusuario` asc),
  index `fk_proceso_servicio1_idx` (`idservicio` asc),
  constraint `fk_proceso_usuario1`
    foreign key (`idusuario`)
    references `servicioslegales`.`usuario` (`idusuario`)
    on delete cascade
    on update no action,
  constraint `fk_proceso_servicio1`
    foreign key (`idservicio`)
    references `servicioslegales`.`servicio` (`idservicio`)
    on delete cascade
    on update no action)
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`documento`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`documento` (
  `iddocumento` int not null auto_increment,
  `ruta_imagen` mediumtext not null,
  `descripcion` mediumtext null,
  `fecha` datetime not null,
  `idproceso` int not null,
  `idservicio` int not null,
  `idrequisito` int not null,
  primary key (`iddocumento`),
  index `fk_documento_proceso1_idx` (`idproceso` asc),
  index `fk_documento_servicio_requisito1_idx` (`idservicio` asc, `idrequisito` asc),
  constraint `fk_documento_proceso1`
    foreign key (`idproceso`)
    references `servicioslegales`.`proceso` (`idproceso`)
    on delete cascade
    on update no action,
  constraint `fk_documento_servicio_requisito1`
    foreign key (`idservicio` , `idrequisito`)
    references `servicioslegales`.`servicio_requisito` (`idservicio` , `idrequisito`)
    on delete cascade
    on update no action)
engine = innodb;


-- -----------------------------------------------------
-- table `servicioslegales`.`historial_proceso`
-- -----------------------------------------------------
create table if not exists `servicioslegales`.`historial_proceso` (
  `idhistorial` int not null auto_increment,
  `idproceso` int not null,
  `comentario` mediumtext not null,
  `fecha_hora` datetime not null,
  primary key (`idhistorial`),
  index `fk_historial_proceso_proceso1_idx` (`idproceso` asc),
  constraint `fk_historial_proceso_proceso1`
    foreign key (`idproceso`)
    references `servicioslegales`.`proceso` (`idproceso`)
    on delete cascade
    on update cascade)
engine = innodb;


set sql_mode=@old_sql_mode;
set foreign_key_checks=@old_foreign_key_checks;
set unique_checks=@old_unique_checks;


###################################### funciones tipo usuario #################
use servicioslegales;
#proc crear_tipo_usr
#parametros nombre
use servicioslegales;
delimiter $$
drop procedure if exists `crear_tipo_usr`$$
create procedure `crear_tipo_usr`(in in_nombre varchar(45))
begin
insert into tipo(nombre) 
values (in_nombre);
end$$
delimiter ;

#proc eliminar_tipo_usr
#parametros id , nombre
delimiter $$
drop procedure if exists `eliminar_tipo_usr`$$
create procedure `eliminar_tipo_usr`(in in_id int,in in_nombre varchar(45))
begin
declare id int;

if (in_id is not null) then
	delete from tipo
	where idtipo=in_id;
else if (in_nombre is not null) then
set id=(select idtipo from tipo where nombre=in_nombre);
	delete from tipo
	where idtipo=id;
end if;
end if ;
end$$
delimiter ;



delimiter $$
drop procedure if exists `actualizar_tipo_usr`$$
create procedure `actualizar_tipo_usr`(in in_id int,in in_nombre varchar(45),in in_nombre2 varchar(45))
begin
declare id int;
if ((in_id is not null) and (in_nombre is not null )) then
	update tipo
    set nombre=in_nombre
	where idtipo=in_id;
else if (in_nombre is not null) then
set id=(select idtipo from tipo where nombre=in_nombre);
	update tipo
    set nombre=in_nombre2
	where idtipo=id;
end if;
end if ;
end$$
delimiter ;
############################ manejo de usuario ##################


delimiter $$
drop function if exists `existe_usr` $$
create function `existe_usr` (in_nombreusr varchar(15)) returns bool
begin
    declare isexist bool;
    set isexist = 0;
    select exists(select *from usuario where `nombre_usuario`=in_nombreusr) into isexist ;
    return isexist;
end $$
delimiter ;



delimiter //
drop procedure if exists `registro_usr`//
create procedure `registro_usr`(
in in_nombre varchar(45),
in in_dpi varchar(20),
in in_telefono varchar(45),
in in_correo varchar(45),
in in_direccion varchar(70),
in in_nombreusr varchar(15),
in in_pass char(32)
)
begin
declare idt int;
set idt=(select idtipo from tipo where nombre='usuario');
insert into usuario(nombre,dpi,telefono,correo,direccion,idtipo,nombre_usuario,contrasenia) 
values (in_nombre,in_dpi,in_telefono,in_correo,in_direccion,idt,in_nombreusr,md5(in_pass));
end//


delimiter //
drop procedure if exists `registro_admin`//
create procedure `registro_admin`(
in in_nombre varchar(45),
in in_dpi varchar(20),
in in_telefono varchar(45),
in in_correo varchar(45),
in in_direccion varchar(70),
in in_nombreusr varchar(15),
in in_pass char(32)
)
begin
declare idt int;
set idt=(select idtipo from tipo where nombre='administrador');
insert into usuario(nombre,dpi,telefono,correo,direccion,idtipo,nombre_usuario,contrasenia) 
values (in_nombre,in_dpi,in_telefono,in_correo,in_direccion,idt,in_nombreusr,md5(in_pass));
end//
delimiter ;



delimiter $$
drop function if exists `login` $$
create function `login` (
in_nombreusr varchar(15),
in_pass char(32)
) returns bool
begin
    declare isexist bool;
    set isexist = 0;
    select exists(select *from usuario where `nombre_usuario`=in_nombreusr and `contrasenia`=md5(in_pass)) into isexist ;
    return isexist;
end
$$ delimiter ;


delimiter $$
drop function if exists `id_usr` $$
create function `id_usr` (
in_nombreusr varchar(15)
) returns int
begin
    declare id int;
    set id =(select idusuario from usuario where nombre_usuario=in_nombreusr);
    return id;
end
$$ delimiter ;


delimiter $$
drop function if exists `tipode_usr` $$
create function `tipode_usr` (
in_id int
) returns int
begin
    declare id int;
    set id =(select idtipo from usuario where idusuario=in_id);
    return id;
end
$$ delimiter ;
# actualizar_usr
# parametros id, nombre,dpi,telefono,correo,direccion,nombreusr,pass
delimiter //

drop procedure if exists `actualizar_usr`//
create procedure `actualizar_usr`(
in in_id int,
in in_nombre varchar(45),
in in_dpi varchar(20),
in in_telefono varchar(45),
in in_correo varchar(45),
in in_direccion varchar(70),
in in_nombreusr varchar(15),
in in_pass char(32)
)
begin
declare id int;

if (in_id is null) then
     if (in_nombreusr is not null) then
     set id =  (select idusuario from usuario where nombre_usuario=in_nombreusr);
     end if;
else 
set id=in_id;
end if;
if (in_nombre is not null) then
	update usuario 
    set nombre=in_nombre
    where idusuario=id;
end if;
if (in_dpi is not null) then
	update usuario 
    set dpi=in_nombre
    where idusuario=id;
end if;
if (in_telefono is not null) then
	update usuario 
    set telefono=in_telefono 
    where idusuario=id;
end if;
if(in_correo is not null) then
	update usuario 
    set correo=in_correo
    where idusuario=id;
end if;
if(in_direccion is not  null) then
	update usuario 
    set direccion=in_direccion
    where idusuario=id;
end if;
if (in_pass is not null) then
	update usuario 
    set contrasenia=md5(in_pass)
    where idusuario=id;
end if;
end//
delimiter ;
############################# tipo de servicio ##################
delimiter $$
drop procedure if exists `crear_tipo_servicio`$$
create procedure `crear_tipo_servicio`(in in_nombre varchar(45))
begin
insert into tipo_servicio(nombre) 
values (in_nombre);
end$$
delimiter ;

#proc eliminar_tipo_usr
#parametros id , nombre
delimiter $$
drop procedure if exists `eliminar_tipo_servicio`$$
create procedure `eliminar_tipo_servicio`(in in_id int,in in_nombre varchar(45))
begin
declare id int;

if (in_id is not null) then
	delete from tipo_servicio
	where idtipo_servicio=in_id;
else if (in_nombre is not null) then
set id=(select idtipo_servicio from tipo_servicio where nombre=in_nombre);
	delete from tipo_servicio
	where idtipo_servicio=id;
end if;
end if ;
end$$
delimiter ;
delimiter $$
drop procedure if exists `actualizar_tipo_servicio`$$
create procedure `actualizar_tipo_servicio`(in in_id int,in in_nombre varchar(45),in in_nombre2 varchar(45))
begin
declare id int;
if ((in_id is not null) and (in_nombre is not null )) then
	update tipo_servicio
    set nombre=in_nombre
	where idtipo_servicio=in_id;
else if (in_nombre is not null) then
set id=(select idtipo_servicio from tipo_servicio where nombre=in_nombre);
	update tipo_servicio
    set nombre=in_nombre2
	where idtipo_servicio=id;
end if;
end if ;
end$$
delimiter ;
############################# requisito ################
delimiter $$
drop procedure if exists `crear_requisito`$$
create procedure `crear_requisito`(in in_nombre varchar(45), in in_desc long varchar)
begin
insert into requisito(nombre,descripcion) 
values (in_nombre,in_desc);
end$$
delimiter ;

#proc eliminar_tipo_usr
#parametros id , nombre
delimiter $$
drop procedure if exists `eliminar_requisito`$$
create procedure `eliminar_requisito`(in in_id int,in in_nombre varchar(45))
begin
declare id int;
if (in_id is not null) then
	delete from requisito
	where idrequisito=in_id;
else if (in_nombre is not null) then
set id=(select idrequisito from requisito where nombre=in_nombre);
	delete from requisito
	where idrequisito=id;
end if;
end if ;
end$$
delimiter ;
delimiter $$
drop procedure if exists `actualizar_requisito`$$
create procedure `actualizar_requisito`(in in_id int,in in_nombre varchar(45),in in_desc long varchar)
begin
if (in_id is not null)  then
if in_desc is not null then
    update requisito
    set descripcion=in_desc
	where idrequisito=in_id;
end if;
if (in_nombre is not null) then
	update requisito
    set nombre=in_nombre
    where idrequisito=in_id;
end if;

end if ;
end$$
delimiter ;
################################# servicio ##########################
delimiter $$
drop procedure if exists `crear_servicio`$$
create procedure `crear_servicio`(in in_nombre varchar(45), in in_desc long varchar,in in_tipo int,in in_precio double)
begin
insert into servicio(nombre,descripcion,idtipo_servicio,precio) 
values (in_nombre,in_desc,in_tipo,in_precio);
end$$
delimiter ;



delimiter $$
drop procedure if exists `actualizar_servicio`$$
create procedure `actualizar_servicio`(in in_id int,in in_nombre varchar(45),in in_desc long varchar,in  id_t int,in in_precio double)
begin

if in_desc is not null then
    update servicio
    set descripcion=in_desc
	where idservicio=in_id;
end if;
if (in_nombre is not null) then
	update servicio
    set nombre=in_nombre
    where idservicio=in_id;
end if;
if (id_t is not null) then
	update servicio
    set idtipo_servicio=id_t
    where idservicio=in_id;
end if;
if (in_precio is not null) then
	update servicio
    set precio=in_precio
    where idservicio=in_id;
end if;
end$$
delimiter ;
delimiter $$
drop procedure if exists `eliminar_servicio`$$
create procedure `eliminar_servicio`(in in_id int)
begin
	delete from servicio
	where idservicio=in_id;
end$$
delimiter ;
############################## agregar requisito a servicios ###################
delimiter $$
drop procedure if exists `crear_servicio_requisito`$$
create procedure `crear_servicio_requisito`(in in_ids int,in in_idr int)
begin
insert into servicio_requisito(idservicio,idrequisito) 
values (in_ids,in_idr);
end$$
delimiter ;

#proc eliminar_tipo_usr
#parametros id , nombre
delimiter $$
drop procedure if exists `eliminar_servicio_requisito`$$
create procedure `eliminar_servicio_requisito`(in in_ids int,in in_idr int)
begin
	delete from servicio_requisito
	where idservicio=in_ids and idrequisito=in_idr;
end$$
delimiter ;
############# ver requisitos de un servicio especifico
delimiter $$
drop procedure if exists `requisitos_servicio`$$
create procedure `requisitos_servicio`(in in_ids int)
begin
select sr.idservicio,s.nombre,sr.idrequisito,r.nombre,r.descripcion
from servicio_requisito sr,requisito r, servicio s
where sr.idservicio=in_ids and sr.idservicio=s.idservicio and sr.idrequisito=r.idrequisito;
end$$
delimiter ;

############# ver requisitos que no estan
delimiter $$
drop procedure if exists `requisitosno_servicio`$$
create procedure `requisitosno_servicio`(in in_ids int)
begin
select  rr.idrequisito,rr.nombre
from requisito rr
where not exists(
select sr.idservicio,s.nombre,sr.idrequisito,r.nombre,r.descripcion
from servicio_requisito sr,requisito r, servicio s
where sr.idservicio=in_ids and sr.idservicio=s.idservicio and sr.idrequisito=r.idrequisito and rr.idrequisito=sr.idrequisito);
end$$
delimiter ;
################################### procesos ###
delimiter |
drop trigger if exists primer_historial |
create trigger primer_historial after insert on proceso

  for each row
  begin
    insert into historial_proceso(idproceso,comentario,fecha_hora)
	values (new.idproceso,'esperando a ser procesado',now());
  end;
| delimiter ;

delimiter //
drop procedure if exists `agregar_proceso`//
create procedure `agregar_proceso`(
in  in_idusuario int,
in in_idservicio int
)
begin
declare exit handler for sqlexception, sqlwarning
begin
    rollback;
end;
insert into proceso(idusuario,idservicio,fecha_inicio,estado) values(in_idusuario,in_idservicio,now(),1);
commit;
end//
delimiter ;

delimiter //
drop procedure if exists `eliminar_proceso`//
create procedure `eliminar_proceso`(
in  in_proceso int)
begin
delete from proceso
where idproceso=in_proceso;
end//
delimiter ;


delimiter //
drop procedure if exists `finalizar_proceso`//
create procedure `finalizar_proceso`(
in  in_proceso int)
begin
declare exit handler for sqlexception, sqlwarning
begin
    rollback;
end;
 update proceso
    set estado=0
	where idproceso=in_proceso;
commit;
	end//
delimiter ;
######################
delimiter $$
drop procedure if exists `get_tipo_servicio`$$
create procedure `get_tipo_servicio`()
begin
select * from tipo_servicio;
end$$
delimiter ;


delimiter $$
drop procedure if exists `get_requisitos`$$
create procedure `get_requisitos` ()
begin
select * from requisito;
end$$
delimiter ;

delimiter $$
drop procedure if exists `get_servicio`$$
create procedure `get_servicio` ()
begin
select * from servicio;
end$$
delimiter ;


delimiter $$
drop procedure if exists `get_tipousuario`$$
create procedure `get_tipousuario`()
begin
select * from  usuario;
end$$
delimiter ;

##################### documentos
delimiter //
drop procedure if exists `agregar_documento`//
create procedure `agregar_documento`(
in  in_ruta long varchar,
in  in_descripcion long varchar,
in in_idservicio int,
in in_idrequisito int,
in in_idproceso int
)
begin
declare exit handler for sqlexception, sqlwarning
begin
    rollback;
end;
if in_descripcion is not null then
insert into documento(ruta_imagen,descripcion,fecha,idproceso,idservicio,idrequisito) values(in_ruta,in_descripcion,now(),in_idproceso,in_idservicio,in_idrequisito);
else
insert into documento(ruta_imagen,fecha,idproceso,idservicio,idrequisito) values(in_ruta,now(),in_idproceso,in_idservicio,in_idrequisito);
end if;
commit;
end//
delimiter ;

delimiter //
drop procedure if exists `actualizar_documento`//
create procedure `actualizar_documento`(
in  in_ruta long varchar,
in  in_descripcion long varchar,
in in_idservicio int,
in in_idrequisito int,
in in_idproceso int
)
begin
 if in_ruta is not null then
 update documento
  set ruta_imagen=in_ruta,
	  fecha=now()
  where idproceso=in_idproceso
      and idservicio=in_idservicio
      and idrequisito=in_idrequisito;
 end if;
  if in_descripcion is not null then
   update documento
  set descripcion=in_descripcion,
	  fecha=now()
  where idproceso=in_idproceso
      and idservicio=in_idservicio
      and idrequisito=in_idrequisito;
 end if;
end//
delimiter ;

###################### ver procesos activos
create or replace view procesos_activos as(
select pr.idproceso,pr.idusuario,pr.idservicio,pr.fecha_inicio,s.nombre as servicio,u.nombre_usuario as usuario
from proceso pr, servicio s, usuario u
where estado=1 and s.idservicio=pr.idservicio and u.idusuario=pr.idusuario);
delimiter //
drop procedure if exists `ver_procesos_activos`//
create procedure `ver_procesos_activos`()
begin
select * from procesos_activos;
end//
delimiter ;

##################### ver procesos por usuario y historial por proceso

select * from procesos_por_usuario

delimiter //
drop procedure if exists `ver_procesos_usuario`//
create procedure `ver_procesos_usuario`( in id int)
begin
select * from proceso
where idusuario=id and estado=1;
end//
delimiter ;


select * from historial_de_proceso

delimiter //
drop procedure if exists `ver_historial_proceso`//
create procedure `ver_historial_proceso`(in id int)
begin
select  * from historial_proceso
where idproceso=id;
end//
delimiter ;
################## mas vistas




delimiter //
drop procedure if exists `ver_servicio_tipo`//
create procedure `ver_servicio_tipo`( in id int)
begin
select * from servicio
where idtipo_servicio=id;
end//
delimiter ;
delimiter //
drop procedure if exists `ver_documentos_proceso`//
create procedure `ver_documentos_proceso`( in id int)
begin
select d.ruta_imagen, d.descripcion,d.fecha,d.idproceso,d.idservicio,d.idrequisito,r.nombre
from documento d, requisito r
where idproceso=id and r.idrequisito=d.idrequisito;
end//
delimiter ;

delimiter //
drop procedure if exists `ver_usuarios_tipo`//
create procedure `ver_usuarios_tipo`( in id int)
begin
select * 
from usuario
where idtipo=id;
end//
delimiter ;

delimiter $$
drop procedure if exists `crear_historial`$$
create procedure `crear_historial`(
in in_idproceso int,
in in_comentario long varchar
)
begin

declare exit handler for sqlexception, sqlwarning
begin
    rollback;
end;
insert into historial_proceso(idproceso,comentario,fecha_hora) 
values (in_idproceso,in_comentario,now());
commit;
end$$
delimiter ;

delimiter $$
drop procedure if exists `eliminar_historial`$$
create procedure `eliminar_historial`(in in_id int)
begin
	delete from historial_proceso
	where idhistorial=in_id;
end$$
delimiter ;












delimiter $$
create definer=`root`@`localhost` function `getidp`(
in_usr int,
in_ser int
) returns int
begin
    declare isexist int;
    set isexist = (select idproceso as idp
from proceso
where idusuario=in_usr and idservicio=in_ser
order by fecha_inicio desc
limit 1);
    return isexist;
end$$
delimiter ;

delimiter $$
drop procedure if exists `ver_procesos_usuario`$$
create definer=`root`@`localhost` procedure `ver_procesos_usuario`( in id int)
begin
select p.idproceso,p.idservicio,p.fecha_inicio,s.nombre,s.descripcion 
from proceso p,servicio s
where idusuario=id and estado=1
and s.idservicio=p.idservicio
order by fecha_inicio desc;
end$$
delimiter ;

delimiter $$
drop procedure if exists `ver_historial_proceso`$$
create  procedure `ver_historial_proceso`(in id int)
begin
select  * from historial_proceso
where idproceso=id
order by fecha_hora desc;
end$$
delimiter ;
